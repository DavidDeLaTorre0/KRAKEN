Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">KRAKEN</string>\r\n    <string name=\"error_empty_fields\">Email o contraseña no pueden estar vacíos</string>\r\n    <string name=\"error_login_failed\">Error al iniciar sesión</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 0f0cef4b454a41e188b851f026800c1028148d43)
+++ b/app/src/main/res/values/strings.xml	(date 1741262440532)
@@ -1,5 +1,4 @@
 <resources>
     <string name="app_name">KRAKEN</string>
-    <string name="error_empty_fields">Email o contraseña no pueden estar vacíos</string>
-    <string name="error_login_failed">Error al iniciar sesión</string>
+    <string name="pokemon_error_message">Error al cargar los Pokémon. Intenta nuevamente.</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/kraken/views/Login.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kraken.views\r\n\r\nimport android.util.Log\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.kraken.ui.componentes.CustomTextField\r\nimport com.example.kraken.ui.theme.Boton\r\nimport com.example.kraken.ui.theme.Texto\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\n\r\n@Composable\r\nfun LoginScreen(auth: FirebaseAuth, navigateToHome: () -> Unit, navigateToLogUp: () -> Unit) {\r\n    var email by remember { mutableStateOf(\"\") }\r\n    var password by remember { mutableStateOf(\"\") }\r\n    var errorMessage by remember { mutableStateOf(\"\") }\r\n\r\n    LazyColumn(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(top = 80.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n\r\n        item {\r\n            // Logo o título \"KRAKEN\"\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.Center\r\n            ) {\r\n                Text(\"KRAKEN\", fontSize = 80.sp, color = Texto)\r\n            }\r\n        }\r\n        item {\r\n            Spacer(modifier = Modifier.height(50.dp))\r\n        }\r\n        item {\r\n            // Campo de usuario\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.Center\r\n            ) {\r\n                CustomTextField(\r\n                    text = \"Correo:\",\r\n                    value = email,\r\n                    onValueChange = { email = it }\r\n                )\r\n            }\r\n        }\r\n        item {\r\n            // Campo de contraseña\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.Center\r\n            ) {\r\n                CustomTextField(\r\n                    text = \"Contraseña:\",\r\n                    value = password,\r\n                    onValueChange = { password = it },\r\n                    isPassword = true\r\n                )\r\n            }\r\n        }\r\n        // Mensaje de error\r\n        if (errorMessage.isNotEmpty()) {\r\n            item {\r\n                Text(\r\n                    text = errorMessage,\r\n                    color = Color.Red,\r\n                    fontSize = 14.sp,\r\n                    modifier = Modifier.padding(top = 4.dp)\r\n                )\r\n            }\r\n        }\r\n        item {\r\n            // Botones\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.Center\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.padding(8.dp)\r\n                ) {\r\n                    Button(\r\n                        onClick = {\r\n                            if (email.isBlank() || password.isBlank()) {\r\n                                errorMessage = \"Email o contraseña no pueden estar vacíos\"\r\n                                //stringResource(R.string.error_login_failed)\r\n                                //LocalContext.current.getString(R.string.error_login_failed)\r\n                            } else {\r\n                                errorMessage = \"\"\r\n                                auth.signInWithEmailAndPassword(email, password)\r\n                                    .addOnCompleteListener { task ->\r\n\r\n                                        if (task.isSuccessful) {\r\n                                            //Navegar\r\n\r\n                                            Log.i(\"LOGIN\", \"LOGIN OK\")\r\n                                            navigateToHome()\r\n\r\n                                        } else {\r\n                                            //Error\r\n                                            Log.i(\"LOGIN\", \"LOGIN KO\")\r\n                                            errorMessage = \"Error al iniciar sesión\"\r\n                                        }\r\n                                    }\r\n                            }\r\n                        },\r\n                        colors = ButtonDefaults.buttonColors(containerColor = Boton),\r\n                        modifier = Modifier.width(125.dp)\r\n                    ) {\r\n                        Text(\"Entrar\", fontSize = 14.sp)\r\n                    }\r\n                }\r\n\r\n                Column(\r\n                    modifier = Modifier.padding(8.dp)\r\n                ) {\r\n                    Button(\r\n                        onClick = {\r\n                            navigateToLogUp()\r\n                        },\r\n                        colors = ButtonDefaults.buttonColors(containerColor = Boton),\r\n                        modifier = Modifier.width(125.dp)\r\n                    ) {\r\n                        Text(\"Registrarse\", fontSize = 14.sp)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kraken/views/Login.kt b/app/src/main/java/com/example/kraken/views/Login.kt
--- a/app/src/main/java/com/example/kraken/views/Login.kt	(revision 0f0cef4b454a41e188b851f026800c1028148d43)
+++ b/app/src/main/java/com/example/kraken/views/Login.kt	(date 1741262420224)
@@ -107,6 +107,7 @@
                         onClick = {
                             if (email.isBlank() || password.isBlank()) {
                                 errorMessage = "Email o contraseña no pueden estar vacíos"
+                                // errorMessage = stringResource(id = R.string.pokemon_error_message)
                                 //stringResource(R.string.error_login_failed)
                                 //LocalContext.current.getString(R.string.error_login_failed)
                             } else {
